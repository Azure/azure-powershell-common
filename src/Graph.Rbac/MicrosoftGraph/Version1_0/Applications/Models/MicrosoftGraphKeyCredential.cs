// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Applications.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// keyCredential
    /// </summary>
    public partial class MicrosoftGraphKeyCredential
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphKeyCredential
        /// class.
        /// </summary>
        public MicrosoftGraphKeyCredential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphKeyCredential
        /// class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="customKeyIdentifier">Custom key identifier</param>
        /// <param name="displayName">Friendly name for the key.
        /// Optional.</param>
        /// <param name="endDateTime">The date and time at which the credential
        /// expires.The Timestamp type represents date and time information
        /// using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</param>
        /// <param name="key">Value for the key credential. Should be a base 64
        /// encoded value.</param>
        /// <param name="keyId">The unique identifier (GUID) for the
        /// key.</param>
        /// <param name="startDateTime">The date and time at which the
        /// credential becomes valid.The Timestamp type represents date and
        /// time information using ISO 8601 format and is always in UTC time.
        /// For example, midnight UTC on Jan 1, 2014 is
        /// 2014-01-01T00:00:00Z</param>
        /// <param name="type">The type of key credential; for example,
        /// 'Symmetric'.</param>
        /// <param name="usage">A string that describes the purpose for which
        /// the key can be used; for example, 'Verify'.</param>
        public MicrosoftGraphKeyCredential(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), byte[] customKeyIdentifier = default(byte[]), string displayName = default(string), System.DateTime? endDateTime = default(System.DateTime?), string key = default(string), System.Guid? keyId = default(System.Guid?), System.DateTime? startDateTime = default(System.DateTime?), string type = default(string), string usage = default(string))
        {
            AdditionalProperties = additionalProperties;
            CustomKeyIdentifier = customKeyIdentifier;
            DisplayName = displayName;
            EndDateTime = endDateTime;
            Key = key;
            KeyId = keyId;
            StartDateTime = startDateTime;
            Type = type;
            Usage = usage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets custom key identifier
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "customKeyIdentifier")]
        public byte[] CustomKeyIdentifier { get; set; }

        /// <summary>
        /// Gets or sets friendly name for the key. Optional.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the date and time at which the credential expires.The
        /// Timestamp type represents date and time information using ISO 8601
        /// format and is always in UTC time. For example, midnight UTC on Jan
        /// 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [JsonProperty(PropertyName = "endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets value for the key credential. Should be a base 64
        /// encoded value.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier (GUID) for the key.
        /// </summary>
        [JsonProperty(PropertyName = "keyId")]
        public System.Guid? KeyId { get; set; }

        /// <summary>
        /// Gets or sets the date and time at which the credential becomes
        /// valid.The Timestamp type represents date and time information using
        /// ISO 8601 format and is always in UTC time. For example, midnight
        /// UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the type of key credential; for example, 'Symmetric'.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets a string that describes the purpose for which the key
        /// can be used; for example, 'Verify'.
        /// </summary>
        [JsonProperty(PropertyName = "usage")]
        public string Usage { get; set; }

    }
}
