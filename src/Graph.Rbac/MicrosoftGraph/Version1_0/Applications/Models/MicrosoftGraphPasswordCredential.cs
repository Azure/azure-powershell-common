// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Applications.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// passwordCredential
    /// </summary>
    public partial class MicrosoftGraphPasswordCredential
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphPasswordCredential
        /// class.
        /// </summary>
        public MicrosoftGraphPasswordCredential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftGraphPasswordCredential
        /// class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="customKeyIdentifier">Do not use.</param>
        /// <param name="displayName">Friendly name for the password.
        /// Optional.</param>
        /// <param name="endDateTime">The date and time at which the password
        /// expires represented using ISO 8601 format and is always in UTC
        /// time. For example, midnight UTC on Jan 1, 2014 is
        /// 2014-01-01T00:00:00Z. Optional.</param>
        /// <param name="hint">Contains the first three characters of the
        /// password. Read-only.</param>
        /// <param name="keyId">The unique identifier for the password.</param>
        /// <param name="secretText">Read-only; Contains the strong passwords
        /// generated by Azure AD that are 16-64 characters in length. The
        /// generated password value is only returned during the initial POST
        /// request to addPassword. There is no way to retrieve this password
        /// in the future.</param>
        /// <param name="startDateTime">The date and time at which the password
        /// becomes valid. The Timestamp type represents date and time
        /// information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// Optional.</param>
        public MicrosoftGraphPasswordCredential(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), byte[] customKeyIdentifier = default(byte[]), string displayName = default(string), System.DateTime? endDateTime = default(System.DateTime?), string hint = default(string), System.Guid? keyId = default(System.Guid?), string secretText = default(string), System.DateTime? startDateTime = default(System.DateTime?))
        {
            AdditionalProperties = additionalProperties;
            CustomKeyIdentifier = customKeyIdentifier;
            DisplayName = displayName;
            EndDateTime = endDateTime;
            Hint = hint;
            KeyId = keyId;
            SecretText = secretText;
            StartDateTime = startDateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets do not use.
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "customKeyIdentifier")]
        public byte[] CustomKeyIdentifier { get; set; }

        /// <summary>
        /// Gets or sets friendly name for the password. Optional.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the date and time at which the password expires
        /// represented using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// Optional.
        /// </summary>
        [JsonProperty(PropertyName = "endDateTime")]
        public System.DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or sets contains the first three characters of the password.
        /// Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "hint")]
        public string Hint { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the password.
        /// </summary>
        [JsonProperty(PropertyName = "keyId")]
        public System.Guid? KeyId { get; set; }

        /// <summary>
        /// Gets or sets read-only; Contains the strong passwords generated by
        /// Azure AD that are 16-64 characters in length. The generated
        /// password value is only returned during the initial POST request to
        /// addPassword. There is no way to retrieve this password in the
        /// future.
        /// </summary>
        [JsonProperty(PropertyName = "secretText")]
        public string SecretText { get; set; }

        /// <summary>
        /// Gets or sets the date and time at which the password becomes valid.
        /// The Timestamp type represents date and time information using ISO
        /// 8601 format and is always in UTC time. For example, midnight UTC on
        /// Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
        /// </summary>
        [JsonProperty(PropertyName = "startDateTime")]
        public System.DateTime? StartDateTime { get; set; }

    }
}
