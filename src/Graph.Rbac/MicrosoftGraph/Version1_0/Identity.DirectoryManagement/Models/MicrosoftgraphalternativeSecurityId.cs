// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Identity.DirectoryManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// alternativeSecurityId
    /// </summary>
    public partial class MicrosoftgraphalternativeSecurityId
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphalternativeSecurityId class.
        /// </summary>
        public MicrosoftgraphalternativeSecurityId()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphalternativeSecurityId class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="identityProvider">For internal use only</param>
        /// <param name="key">For internal use only</param>
        /// <param name="type">For internal use only</param>
        public MicrosoftgraphalternativeSecurityId(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string identityProvider = default(string), byte[] key = default(byte[]), int? type = default(int?))
        {
            AdditionalProperties = additionalProperties;
            IdentityProvider = identityProvider;
            Key = key;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets for internal use only
        /// </summary>
        [JsonProperty(PropertyName = "identityProvider")]
        public string IdentityProvider { get; set; }

        /// <summary>
        /// Gets or sets for internal use only
        /// </summary>
        [JsonConverter(typeof(Base64UrlJsonConverter))]
        [JsonProperty(PropertyName = "key")]
        public byte[] Key { get; set; }

        /// <summary>
        /// Gets or sets for internal use only
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public int? Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Type", 2147483647);
            }
            if (Type < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Type", -2147483648);
            }
        }
    }
}
