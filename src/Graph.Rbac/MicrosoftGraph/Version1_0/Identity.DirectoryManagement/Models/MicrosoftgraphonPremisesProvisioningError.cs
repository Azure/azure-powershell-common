// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Identity.DirectoryManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// onPremisesProvisioningError
    /// </summary>
    public partial class MicrosoftgraphonPremisesProvisioningError
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphonPremisesProvisioningError class.
        /// </summary>
        public MicrosoftgraphonPremisesProvisioningError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphonPremisesProvisioningError class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="category">Category of the provisioning error. Note:
        /// Currently, there is only one possible value. Possible value:
        /// PropertyConflict - indicates a property value is not unique. Other
        /// objects contain the same value for the property.</param>
        /// <param name="occurredDateTime">The date and time at which the error
        /// occurred.</param>
        /// <param name="propertyCausingError">Name of the directory property
        /// causing the error. Current possible values: UserPrincipalName or
        /// ProxyAddress</param>
        /// <param name="value">Value of the property causing the
        /// error.</param>
        public MicrosoftgraphonPremisesProvisioningError(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string category = default(string), System.DateTime? occurredDateTime = default(System.DateTime?), string propertyCausingError = default(string), string value = default(string))
        {
            AdditionalProperties = additionalProperties;
            Category = category;
            OccurredDateTime = occurredDateTime;
            PropertyCausingError = propertyCausingError;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets category of the provisioning error. Note: Currently,
        /// there is only one possible value. Possible value: PropertyConflict
        /// - indicates a property value is not unique. Other objects contain
        /// the same value for the property.
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the date and time at which the error occurred.
        /// </summary>
        [JsonProperty(PropertyName = "occurredDateTime")]
        public System.DateTime? OccurredDateTime { get; set; }

        /// <summary>
        /// Gets or sets name of the directory property causing the error.
        /// Current possible values: UserPrincipalName or ProxyAddress
        /// </summary>
        [JsonProperty(PropertyName = "propertyCausingError")]
        public string PropertyCausingError { get; set; }

        /// <summary>
        /// Gets or sets value of the property causing the error.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }
    }
}
