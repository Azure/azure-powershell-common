// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Identity.DirectoryManagement.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// physicalOfficeAddress
    /// </summary>
    public partial class MicrosoftgraphphysicalOfficeAddress
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphphysicalOfficeAddress class.
        /// </summary>
        public MicrosoftgraphphysicalOfficeAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphphysicalOfficeAddress class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="city">The city.</param>
        /// <param name="countryOrRegion">The country or region. It's a
        /// free-format string value, for example, 'United States'.</param>
        /// <param name="officeLocation">Office location such as building and
        /// office number for an organizational contact.</param>
        /// <param name="postalCode">The postal code.</param>
        /// <param name="state">The state.</param>
        /// <param name="street">The street.</param>
        public MicrosoftgraphphysicalOfficeAddress(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string city = default(string), string countryOrRegion = default(string), string officeLocation = default(string), string postalCode = default(string), string state = default(string), string street = default(string))
        {
            AdditionalProperties = additionalProperties;
            City = city;
            CountryOrRegion = countryOrRegion;
            OfficeLocation = officeLocation;
            PostalCode = postalCode;
            State = state;
            Street = street;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the city.
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the country or region. It's a free-format string
        /// value, for example, 'United States'.
        /// </summary>
        [JsonProperty(PropertyName = "countryOrRegion")]
        public string CountryOrRegion { get; set; }

        /// <summary>
        /// Gets or sets office location such as building and office number for
        /// an organizational contact.
        /// </summary>
        [JsonProperty(PropertyName = "officeLocation")]
        public string OfficeLocation { get; set; }

        /// <summary>
        /// Gets or sets the postal code.
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the state.
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the street.
        /// </summary>
        [JsonProperty(PropertyName = "street")]
        public string Street { get; set; }

    }
}
