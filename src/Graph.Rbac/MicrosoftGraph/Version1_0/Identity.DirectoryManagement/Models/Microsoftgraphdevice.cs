// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Identity.DirectoryManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Microsoftgraphdevice : MicrosoftgraphdirectoryObject
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphdevice class.
        /// </summary>
        public Microsoftgraphdevice()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphdevice class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="id">The unique idenfier for an entity.
        /// Read-only.</param>
        /// <param name="deletedDateTime">Date and time when this object was
        /// deleted. Always null when the object hasn't been deleted.</param>
        /// <param name="accountEnabled">true if the account is enabled;
        /// otherwise, false. Required. Default is true.  Supports $filter (eq,
        /// ne, not, in). Only callers in Global Administrator and Cloud Device
        /// Administrator roles can set this property.</param>
        /// <param name="alternativeSecurityIds">For internal use only. Not
        /// nullable. Supports $filter (eq, not, ge, le).</param>
        /// <param name="approximateLastSignInDateTime">The timestamp type
        /// represents date and time information using ISO 8601 format and is
        /// always in UTC time. For example, midnight UTC on Jan 1, 2014 is
        /// 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge,
        /// le, and eq on null values) and $orderBy.</param>
        /// <param name="complianceExpirationDateTime">The timestamp when the
        /// device is no longer deemed compliant. The timestamp type represents
        /// date and time information using ISO 8601 format and is always in
        /// UTC time. For example, midnight UTC on Jan 1, 2014 is
        /// 2014-01-01T00:00:00Z. Read-only.</param>
        /// <param name="deviceId">Unique identifier set by Azure Device
        /// Registration Service at the time of registration. Supports $filter
        /// (eq, ne, not, startsWith).</param>
        /// <param name="deviceMetadata">For internal use only. Set to
        /// null.</param>
        /// <param name="deviceVersion">For internal use only.</param>
        /// <param name="displayName">The display name for the device.
        /// Required. Supports $filter (eq, ne, not, ge, le, in, startsWith,
        /// and eq on null values), $search, and $orderBy.</param>
        /// <param name="extensions">The collection of open extensions defined
        /// for the device. Read-only. Nullable.</param>
        /// <param name="isCompliant">true if the device complies with Mobile
        /// Device Management (MDM) policies; otherwise, false. Read-only. This
        /// can only be updated by Intune for any device OS type or by an
        /// approved MDM app for Windows OS devices. Supports $filter (eq, ne,
        /// not).</param>
        /// <param name="isManaged">true if the device is managed by a Mobile
        /// Device Management (MDM) app; otherwise, false. This can only be
        /// updated by Intune for any device OS type or by an approved MDM app
        /// for Windows OS devices. Supports $filter (eq, ne, not).</param>
        /// <param name="mdmAppId">Application identifier used to register
        /// device into MDM. Read-only. Supports $filter (eq, ne, not,
        /// startsWith).</param>
        /// <param name="memberOf">Groups and administrative units that this
        /// device is a member of. Read-only. Nullable. Supports
        /// $expand.</param>
        /// <param name="onPremisesLastSyncDateTime">The last time at which the
        /// object was synced with the on-premises directory. The Timestamp
        /// type represents date and time information using ISO 8601 format and
        /// is always in UTC time. For example, midnight UTC on Jan 1, 2014 is
        /// 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge,
        /// le, in).</param>
        /// <param name="onPremisesSyncEnabled">true if this object is synced
        /// from an on-premises directory; false if this object was originally
        /// synced from an on-premises directory but is no longer synced; null
        /// if this object has never been synced from an on-premises directory
        /// (default). Read-only. Supports $filter (eq, ne, not, in, and eq on
        /// null values).</param>
        /// <param name="operatingSystem">The type of operating system on the
        /// device. Required. Supports $filter (eq, ne, not, ge, le,
        /// startsWith, and eq on null values).</param>
        /// <param name="operatingSystemVersion">The version of the operating
        /// system on the device. Required. Supports $filter (eq, ne, not, ge,
        /// le, startsWith, and eq on null values).</param>
        /// <param name="physicalIds">For internal use only. Not nullable.
        /// Supports $filter (eq, not, ge, le, startsWith, and counting empty
        /// collections).</param>
        /// <param name="profileType">The profile type of the device. Possible
        /// values: RegisteredDevice (default), SecureVM, Printer, Shared,
        /// IoT.</param>
        /// <param name="registeredOwners">The user that cloud joined the
        /// device or registered their personal device. The registered owner is
        /// set at the time of registration. Currently, there can be only one
        /// owner. Read-only. Nullable. Supports $expand.</param>
        /// <param name="registeredUsers">Collection of registered users of the
        /// device. For cloud joined devices and registered personal devices,
        /// registered users are set to the same value as registered owners at
        /// the time of registration. Read-only. Nullable. Supports
        /// $expand.</param>
        /// <param name="systemLabels">List of labels applied to the device by
        /// the system. Supports $filter (eq when counting empty
        /// collections).</param>
        /// <param name="transitiveMemberOf">Groups and administrative units
        /// that the device is a member of. This operation is transitive.
        /// Supports $expand.</param>
        /// <param name="trustType">Type of trust for the joined device.
        /// Read-only. Possible values:  Workplace (indicates bring your own
        /// personal devices), AzureAd (Cloud only joined devices), ServerAd
        /// (on-premises domain joined devices joined to Azure AD). For more
        /// details, see Introduction to device management in Azure Active
        /// Directory</param>
        public Microsoftgraphdevice(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string id = default(string), System.DateTime? deletedDateTime = default(System.DateTime?), bool? accountEnabled = default(bool?), IList<MicrosoftgraphalternativeSecurityId> alternativeSecurityIds = default(IList<MicrosoftgraphalternativeSecurityId>), System.DateTime? approximateLastSignInDateTime = default(System.DateTime?), System.DateTime? complianceExpirationDateTime = default(System.DateTime?), string deviceId = default(string), string deviceMetadata = default(string), int? deviceVersion = default(int?), string displayName = default(string), IList<Microsoftgraphextension> extensions = default(IList<Microsoftgraphextension>), bool? isCompliant = default(bool?), bool? isManaged = default(bool?), string mdmAppId = default(string), IList<MicrosoftgraphdirectoryObject> memberOf = default(IList<MicrosoftgraphdirectoryObject>), System.DateTime? onPremisesLastSyncDateTime = default(System.DateTime?), bool? onPremisesSyncEnabled = default(bool?), string operatingSystem = default(string), string operatingSystemVersion = default(string), IList<string> physicalIds = default(IList<string>), string profileType = default(string), IList<MicrosoftgraphdirectoryObject> registeredOwners = default(IList<MicrosoftgraphdirectoryObject>), IList<MicrosoftgraphdirectoryObject> registeredUsers = default(IList<MicrosoftgraphdirectoryObject>), IList<string> systemLabels = default(IList<string>), IList<MicrosoftgraphdirectoryObject> transitiveMemberOf = default(IList<MicrosoftgraphdirectoryObject>), string trustType = default(string))
            : base(additionalProperties, id, deletedDateTime)
        {
            AccountEnabled = accountEnabled;
            AlternativeSecurityIds = alternativeSecurityIds;
            ApproximateLastSignInDateTime = approximateLastSignInDateTime;
            ComplianceExpirationDateTime = complianceExpirationDateTime;
            DeviceId = deviceId;
            DeviceMetadata = deviceMetadata;
            DeviceVersion = deviceVersion;
            DisplayName = displayName;
            Extensions = extensions;
            IsCompliant = isCompliant;
            IsManaged = isManaged;
            MdmAppId = mdmAppId;
            MemberOf = memberOf;
            OnPremisesLastSyncDateTime = onPremisesLastSyncDateTime;
            OnPremisesSyncEnabled = onPremisesSyncEnabled;
            OperatingSystem = operatingSystem;
            OperatingSystemVersion = operatingSystemVersion;
            PhysicalIds = physicalIds;
            ProfileType = profileType;
            RegisteredOwners = registeredOwners;
            RegisteredUsers = registeredUsers;
            SystemLabels = systemLabels;
            TransitiveMemberOf = transitiveMemberOf;
            TrustType = trustType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets true if the account is enabled; otherwise, false.
        /// Required. Default is true.  Supports $filter (eq, ne, not, in).
        /// Only callers in Global Administrator and Cloud Device Administrator
        /// roles can set this property.
        /// </summary>
        [JsonProperty(PropertyName = "accountEnabled")]
        public bool? AccountEnabled { get; set; }

        /// <summary>
        /// Gets or sets for internal use only. Not nullable. Supports $filter
        /// (eq, not, ge, le).
        /// </summary>
        [JsonProperty(PropertyName = "alternativeSecurityIds")]
        public IList<MicrosoftgraphalternativeSecurityId> AlternativeSecurityIds { get; set; }

        /// <summary>
        /// Gets or sets the timestamp type represents date and time
        /// information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null
        /// values) and $orderBy.
        /// </summary>
        [JsonProperty(PropertyName = "approximateLastSignInDateTime")]
        public System.DateTime? ApproximateLastSignInDateTime { get; set; }

        /// <summary>
        /// Gets or sets the timestamp when the device is no longer deemed
        /// compliant. The timestamp type represents date and time information
        /// using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
        /// </summary>
        [JsonProperty(PropertyName = "complianceExpirationDateTime")]
        public System.DateTime? ComplianceExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or sets unique identifier set by Azure Device Registration
        /// Service at the time of registration. Supports $filter (eq, ne, not,
        /// startsWith).
        /// </summary>
        [JsonProperty(PropertyName = "deviceId")]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets for internal use only. Set to null.
        /// </summary>
        [JsonProperty(PropertyName = "deviceMetadata")]
        public string DeviceMetadata { get; set; }

        /// <summary>
        /// Gets or sets for internal use only.
        /// </summary>
        [JsonProperty(PropertyName = "deviceVersion")]
        public int? DeviceVersion { get; set; }

        /// <summary>
        /// Gets or sets the display name for the device. Required. Supports
        /// $filter (eq, ne, not, ge, le, in, startsWith, and eq on null
        /// values), $search, and $orderBy.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the collection of open extensions defined for the
        /// device. Read-only. Nullable.
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<Microsoftgraphextension> Extensions { get; set; }

        /// <summary>
        /// Gets or sets true if the device complies with Mobile Device
        /// Management (MDM) policies; otherwise, false. Read-only. This can
        /// only be updated by Intune for any device OS type or by an approved
        /// MDM app for Windows OS devices. Supports $filter (eq, ne, not).
        /// </summary>
        [JsonProperty(PropertyName = "isCompliant")]
        public bool? IsCompliant { get; set; }

        /// <summary>
        /// Gets or sets true if the device is managed by a Mobile Device
        /// Management (MDM) app; otherwise, false. This can only be updated by
        /// Intune for any device OS type or by an approved MDM app for Windows
        /// OS devices. Supports $filter (eq, ne, not).
        /// </summary>
        [JsonProperty(PropertyName = "isManaged")]
        public bool? IsManaged { get; set; }

        /// <summary>
        /// Gets or sets application identifier used to register device into
        /// MDM. Read-only. Supports $filter (eq, ne, not, startsWith).
        /// </summary>
        [JsonProperty(PropertyName = "mdmAppId")]
        public string MdmAppId { get; set; }

        /// <summary>
        /// Gets or sets groups and administrative units that this device is a
        /// member of. Read-only. Nullable. Supports $expand.
        /// </summary>
        [JsonProperty(PropertyName = "memberOf")]
        public IList<MicrosoftgraphdirectoryObject> MemberOf { get; set; }

        /// <summary>
        /// Gets or sets the last time at which the object was synced with the
        /// on-premises directory. The Timestamp type represents date and time
        /// information using ISO 8601 format and is always in UTC time. For
        /// example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// Read-only. Supports $filter (eq, ne, not, ge, le, in).
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesLastSyncDateTime")]
        public System.DateTime? OnPremisesLastSyncDateTime { get; set; }

        /// <summary>
        /// Gets or sets true if this object is synced from an on-premises
        /// directory; false if this object was originally synced from an
        /// on-premises directory but is no longer synced; null if this object
        /// has never been synced from an on-premises directory (default).
        /// Read-only. Supports $filter (eq, ne, not, in, and eq on null
        /// values).
        /// </summary>
        [JsonProperty(PropertyName = "onPremisesSyncEnabled")]
        public bool? OnPremisesSyncEnabled { get; set; }

        /// <summary>
        /// Gets or sets the type of operating system on the device. Required.
        /// Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null
        /// values).
        /// </summary>
        [JsonProperty(PropertyName = "operatingSystem")]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets the version of the operating system on the device.
        /// Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq
        /// on null values).
        /// </summary>
        [JsonProperty(PropertyName = "operatingSystemVersion")]
        public string OperatingSystemVersion { get; set; }

        /// <summary>
        /// Gets or sets for internal use only. Not nullable. Supports $filter
        /// (eq, not, ge, le, startsWith, and counting empty collections).
        /// </summary>
        [JsonProperty(PropertyName = "physicalIds")]
        public IList<string> PhysicalIds { get; set; }

        /// <summary>
        /// Gets or sets the profile type of the device. Possible values:
        /// RegisteredDevice (default), SecureVM, Printer, Shared, IoT.
        /// </summary>
        [JsonProperty(PropertyName = "profileType")]
        public string ProfileType { get; set; }

        /// <summary>
        /// Gets or sets the user that cloud joined the device or registered
        /// their personal device. The registered owner is set at the time of
        /// registration. Currently, there can be only one owner. Read-only.
        /// Nullable. Supports $expand.
        /// </summary>
        [JsonProperty(PropertyName = "registeredOwners")]
        public IList<MicrosoftgraphdirectoryObject> RegisteredOwners { get; set; }

        /// <summary>
        /// Gets or sets collection of registered users of the device. For
        /// cloud joined devices and registered personal devices, registered
        /// users are set to the same value as registered owners at the time of
        /// registration. Read-only. Nullable. Supports $expand.
        /// </summary>
        [JsonProperty(PropertyName = "registeredUsers")]
        public IList<MicrosoftgraphdirectoryObject> RegisteredUsers { get; set; }

        /// <summary>
        /// Gets or sets list of labels applied to the device by the system.
        /// Supports $filter (eq when counting empty collections).
        /// </summary>
        [JsonProperty(PropertyName = "systemLabels")]
        public IList<string> SystemLabels { get; set; }

        /// <summary>
        /// Gets or sets groups and administrative units that the device is a
        /// member of. This operation is transitive. Supports $expand.
        /// </summary>
        [JsonProperty(PropertyName = "transitiveMemberOf")]
        public IList<MicrosoftgraphdirectoryObject> TransitiveMemberOf { get; set; }

        /// <summary>
        /// Gets or sets type of trust for the joined device. Read-only.
        /// Possible values:  Workplace (indicates bring your own personal
        /// devices), AzureAd (Cloud only joined devices), ServerAd
        /// (on-premises domain joined devices joined to Azure AD). For more
        /// details, see Introduction to device management in Azure Active
        /// Directory
        /// </summary>
        [JsonProperty(PropertyName = "trustType")]
        public string TrustType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (AlternativeSecurityIds != null)
            {
                foreach (var element in AlternativeSecurityIds)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(ApproximateLastSignInDateTime, "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "ApproximateLastSignInDateTime", "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$");
            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(ComplianceExpirationDateTime, "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "ComplianceExpirationDateTime", "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$");
            }
            if (DeviceVersion > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DeviceVersion", 2147483647);
            }
            if (DeviceVersion < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "DeviceVersion", -2147483648);
            }
            if (MemberOf != null)
            {
                foreach (var element1 in MemberOf)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(OnPremisesLastSyncDateTime, "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "OnPremisesLastSyncDateTime", "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$");
            }
            if (RegisteredOwners != null)
            {
                foreach (var element2 in RegisteredOwners)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (RegisteredUsers != null)
            {
                foreach (var element3 in RegisteredUsers)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (TransitiveMemberOf != null)
            {
                foreach (var element4 in TransitiveMemberOf)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
        }
    }
}
