// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Identity.DirectoryManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MicrosoftgraphsubscribedSku : Microsoftgraphentity
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphsubscribedSku
        /// class.
        /// </summary>
        public MicrosoftgraphsubscribedSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphsubscribedSku
        /// class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="id">The unique idenfier for an entity.
        /// Read-only.</param>
        /// <param name="appliesTo">For example, 'User' or 'Company'.</param>
        /// <param name="capabilityStatus">Possible values are: Enabled,
        /// Warning, Suspended, Deleted, LockedOut. The capabilityStatus is
        /// Enabled if the prepaidUnits property has at least 1 unit that is
        /// enabled, and LockedOut if the customer cancelled their
        /// subscription.</param>
        /// <param name="consumedUnits">The number of licenses that have been
        /// assigned.</param>
        /// <param name="servicePlans">Information about the service plans that
        /// are available with the SKU. Not nullable</param>
        /// <param name="skuId">The unique identifier (GUID) for the service
        /// SKU.</param>
        /// <param name="skuPartNumber">The SKU part number; for example:
        /// 'AAD_PREMIUM' or 'RMSBASIC'. To get a list of commercial
        /// subscriptions that an organization has acquired, see List
        /// subscribedSkus.</param>
        public MicrosoftgraphsubscribedSku(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string id = default(string), string appliesTo = default(string), string capabilityStatus = default(string), int? consumedUnits = default(int?), MicrosoftgraphlicenseUnitsDetail prepaidUnits = default(MicrosoftgraphlicenseUnitsDetail), IList<MicrosoftgraphservicePlanInfo> servicePlans = default(IList<MicrosoftgraphservicePlanInfo>), System.Guid? skuId = default(System.Guid?), string skuPartNumber = default(string))
            : base(additionalProperties, id)
        {
            AppliesTo = appliesTo;
            CapabilityStatus = capabilityStatus;
            ConsumedUnits = consumedUnits;
            PrepaidUnits = prepaidUnits;
            ServicePlans = servicePlans;
            SkuId = skuId;
            SkuPartNumber = skuPartNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets for example, 'User' or 'Company'.
        /// </summary>
        [JsonProperty(PropertyName = "appliesTo")]
        public string AppliesTo { get; set; }

        /// <summary>
        /// Gets or sets possible values are: Enabled, Warning, Suspended,
        /// Deleted, LockedOut. The capabilityStatus is Enabled if the
        /// prepaidUnits property has at least 1 unit that is enabled, and
        /// LockedOut if the customer cancelled their subscription.
        /// </summary>
        [JsonProperty(PropertyName = "capabilityStatus")]
        public string CapabilityStatus { get; set; }

        /// <summary>
        /// Gets or sets the number of licenses that have been assigned.
        /// </summary>
        [JsonProperty(PropertyName = "consumedUnits")]
        public int? ConsumedUnits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prepaidUnits")]
        public MicrosoftgraphlicenseUnitsDetail PrepaidUnits { get; set; }

        /// <summary>
        /// Gets or sets information about the service plans that are available
        /// with the SKU. Not nullable
        /// </summary>
        [JsonProperty(PropertyName = "servicePlans")]
        public IList<MicrosoftgraphservicePlanInfo> ServicePlans { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier (GUID) for the service SKU.
        /// </summary>
        [JsonProperty(PropertyName = "skuId")]
        public System.Guid? SkuId { get; set; }

        /// <summary>
        /// Gets or sets the SKU part number; for example: 'AAD_PREMIUM' or
        /// 'RMSBASIC'. To get a list of commercial subscriptions that an
        /// organization has acquired, see List subscribedSkus.
        /// </summary>
        [JsonProperty(PropertyName = "skuPartNumber")]
        public string SkuPartNumber { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConsumedUnits > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ConsumedUnits", 2147483647);
            }
            if (ConsumedUnits < -2147483648)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ConsumedUnits", -2147483648);
            }
            if (PrepaidUnits != null)
            {
                PrepaidUnits.Validate();
            }
            if (ServicePlans != null)
            {
                foreach (var element in ServicePlans)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(SkuId, "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"))
            {
                throw new ValidationException(ValidationRules.Pattern, "SkuId", "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");
            }
        }
    }
}
