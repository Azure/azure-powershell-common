// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Common.MSGraph.Version1_0.Identity.DirectoryManagement.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// verifiedDomain
    /// </summary>
    public partial class MicrosoftgraphverifiedDomain
    {
        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphverifiedDomain
        /// class.
        /// </summary>
        public MicrosoftgraphverifiedDomain()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MicrosoftgraphverifiedDomain
        /// class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="capabilities">For example, Email,
        /// OfficeCommunicationsOnline.</param>
        /// <param name="isDefault">true if this is the default domain
        /// associated with the tenant; otherwise, false.</param>
        /// <param name="isInitial">true if this is the initial domain
        /// associated with the tenant; otherwise, false.</param>
        /// <param name="name">The domain name; for example,
        /// contoso.onmicrosoft.com.</param>
        /// <param name="type">For example, Managed.</param>
        public MicrosoftgraphverifiedDomain(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string capabilities = default(string), bool? isDefault = default(bool?), bool? isInitial = default(bool?), string name = default(string), string type = default(string))
        {
            AdditionalProperties = additionalProperties;
            Capabilities = capabilities;
            IsDefault = isDefault;
            IsInitial = isInitial;
            Name = name;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets for example, Email, OfficeCommunicationsOnline.
        /// </summary>
        [JsonProperty(PropertyName = "capabilities")]
        public string Capabilities { get; set; }

        /// <summary>
        /// Gets or sets true if this is the default domain associated with the
        /// tenant; otherwise, false.
        /// </summary>
        [JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or sets true if this is the initial domain associated with the
        /// tenant; otherwise, false.
        /// </summary>
        [JsonProperty(PropertyName = "isInitial")]
        public bool? IsInitial { get; set; }

        /// <summary>
        /// Gets or sets the domain name; for example, contoso.onmicrosoft.com.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets for example, Managed.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

    }
}
