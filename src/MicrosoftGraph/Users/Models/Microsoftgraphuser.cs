// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Cmdlets.MicrosoftGraph.Users.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Microsoftgraphuser : MicrosoftgraphdirectoryObject
    {
        /// <summary>
        /// Initializes a new instance of the Microsoftgraphuser class.
        /// </summary>
        public Microsoftgraphuser()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Microsoftgraphuser class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="id">Read-only.</param>
        /// <param name="accountEnabled">true if the account is enabled;
        /// otherwise, false. This property is required when a user is created.
        /// Supports $filter (eq, ne, NOT, and in).</param>
        /// <param name="employeeId">The employee identifier assigned to the
        /// user by the organization. Supports $filter (eq, ne, NOT , ge, le,
        /// in, startsWith).</param>
        /// <param name="userType">A string value that can be used to classify
        /// user types in your directory, such as Member and Guest. Supports
        /// $filter (eq, ne, NOT, in,).</param>
        public Microsoftgraphuser(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string id = default(string), System.DateTime? deletedDateTime = default(System.DateTime?), bool? accountEnabled = default(bool?), string employeeId = default(string), string userType = default(string))
            : base(additionalProperties, id, deletedDateTime)
        {
            AccountEnabled = accountEnabled;
            EmployeeId = employeeId;
            UserType = userType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets true if the account is enabled; otherwise, false. This
        /// property is required when a user is created. Supports $filter (eq,
        /// ne, NOT, and in).
        /// </summary>
        [JsonProperty(PropertyName = "accountEnabled")]
        public bool? AccountEnabled { get; set; }

        /// <summary>
        /// Gets or sets the employee identifier assigned to the user by the
        /// organization. Supports $filter (eq, ne, NOT , ge, le, in,
        /// startsWith).
        /// </summary>
        [JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

        /// <summary>
        /// Gets or sets a string value that can be used to classify user types
        /// in your directory, such as Member and Guest. Supports $filter (eq,
        /// ne, NOT, in,).
        /// </summary>
        [JsonProperty(PropertyName = "userType")]
        public string UserType { get; set; }

        public bool Validate()
        {
            return true;
        }
    }
}
