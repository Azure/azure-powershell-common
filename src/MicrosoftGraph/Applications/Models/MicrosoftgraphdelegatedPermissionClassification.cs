// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Cmdlets.MicrosoftGraph.Applications.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MicrosoftgraphdelegatedPermissionClassification : Microsoftgraphentity
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphdelegatedPermissionClassification class.
        /// </summary>
        public MicrosoftgraphdelegatedPermissionClassification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftgraphdelegatedPermissionClassification class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="id">Read-only.</param>
        /// <param name="classification">Possible values include: 'low',
        /// 'medium', 'high', 'unknownFutureValue'</param>
        /// <param name="permissionId">The unique identifier (id) for the
        /// delegated permission listed in the publishedPermissionScopes
        /// collection of the servicePrincipal. Required on create. Does not
        /// support $filter.</param>
        /// <param name="permissionName">The claim value (value) for the
        /// delegated permission listed in the publishedPermissionScopes
        /// collection of the servicePrincipal. Does not support
        /// $filter.</param>
        public MicrosoftgraphdelegatedPermissionClassification(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string id = default(string), string classification = default(string), string permissionId = default(string), string permissionName = default(string))
            : base(additionalProperties, id)
        {
            Classification = classification;
            PermissionId = permissionId;
            PermissionName = permissionName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'low', 'medium', 'high',
        /// 'unknownFutureValue'
        /// </summary>
        [JsonProperty(PropertyName = "classification")]
        public string Classification { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier (id) for the delegated
        /// permission listed in the publishedPermissionScopes collection of
        /// the servicePrincipal. Required on create. Does not support $filter.
        /// </summary>
        [JsonProperty(PropertyName = "permissionId")]
        public string PermissionId { get; set; }

        /// <summary>
        /// Gets or sets the claim value (value) for the delegated permission
        /// listed in the publishedPermissionScopes collection of the
        /// servicePrincipal. Does not support $filter.
        /// </summary>
        [JsonProperty(PropertyName = "permissionName")]
        public string PermissionName { get; set; }

    }
}
